<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans      
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd      
		http://www.springframework.org/schema/context      
		http://www.springframework.org/schema/context/spring-context-4.0.xsd      
		http://www.springframework.org/schema/mvc      
		http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/tx   
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<!-- 可以扫描controller、service、... 这里让扫描controller，指定controller的包 -->
	<context:component-scan base-package="com.drepair.controller"></context:component-scan>

	<!-- 静态资源解析 包括：js、css、img、.. -->
	<!-- <mvc:resources location="/" mapping="/**"/> -->
	<mvc:resources location="/admin/assets/" mapping="/admin/assets/**" />

	<!-- 使用mvc:annotation-driven代替上边注解映射器和注解适配器 mvc:annotation-driven默认加载很多的参数绑定方法，比如json转换解析器就默认加载了 -->
	<mvc:annotation-driven conversion-service="conversionService"
		validator="validator"></mvc:annotation-driven>

	<!-- 视图解析器 解析jsp，默认使用jstl标签 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 配置jsp页面路径的前缀和后缀 -->
		<property name="prefix" value="/admin/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>

	<!-- 自定义参数绑定 -->
	<bean id="conversionService"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<!-- 转换器 -->
		<property name="converters">
			<list>
				<!-- 日期类型转换 -->
				<bean class="com.drepair.converter.CustomDateConverter"></bean>
			</list>
		</property>
	</bean>

	<!-- 校验器 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<!-- 校验器 -->
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!--指定校验使用的资源文件，如果不指定则默认使用classpath下的ValidationMessages.properties -->
		<property name="validationMessageSource" ref="messageSource" />
	</bean>
	<!-- 校验错误信息配置文件 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<!-- 资源文件名 -->
		<property name="basenames">
			<list>
				<value>classpath:CustomValidationMessages</value>
			</list>
		</property>
		<!-- 资源文件编码格式 -->
		<property name="fileEncodings" value="utf-8" />
		<!-- 对资源文件内容缓存时间，单位秒 -->
		<property name="cacheSeconds" value="120" />
	</bean>

	<!-- 全局异常处理器 只要实现HandlerExceptionResolver接口就是全局异常处理器 -->
	<bean class="com.drepair.exception.CustomExceptionResolver" />

	<!-- 文件上传 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize">
			<!-- 设置文件上传的最大尺寸为5MB -->
			<value>5242880</value>
		</property>
	</bean>

	<!-- 拦截器 -->
	<!-- <mvc:interceptors> 多个拦截器,顺序执行 <mvc:interceptor> /**表示所有url包括字url路径 
		<mvc:mapping path="/**" /> <bean class="com.songm.ssm.interceptor.LoginInterceptor"></bean> 
		</mvc:interceptor> <mvc:interceptor> /**表示所有url包括字url路径 <mvc:mapping path="/**" 
		/> <bean class="com.songm.ssm.interceptor.HandlerInterceptor1"></bean> </mvc:interceptor> 
		<mvc:interceptor> <mvc:mapping path="/**" /> <bean class="com.songm.ssm.interceptor.HandlerInterceptor2"></bean> 
		</mvc:interceptor> </mvc:interceptors> -->

	<!-- 配置验证码 -->
    <bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
        <property name="config">
            <bean class="com.google.code.kaptcha.util.Config">
                <constructor-arg>
                    <props>
                        <!-- 图片边框 -->
                        <prop key="kaptcha.border">no</prop>
                        <!-- 图片宽度 -->
                        <prop key="kaptcha.image.width">95</prop>
                        <!-- 图片高度 -->
                        <prop key="kaptcha.image.height">45</prop>
                        <!-- 验证码背景颜色渐变，开始颜色 -->
                        <prop key="kaptcha.background.clear.from">248,248,248</prop>
                        <!-- 验证码背景颜色渐变，结束颜色 -->
                        <prop key="kaptcha.background.clear.to">248,248,248</prop>
                        <!-- 验证码的字符 -->
                        <prop key="kaptcha.textproducer.char.string">0123456789abcdefghijklmnopqrstuvwxyz快过年了我想回家</prop>
                        <!-- 验证码字体颜色 -->
                        <prop key="kaptcha.textproducer.font.color">0,0,255</prop>
                        <!-- 验证码的效果，水纹 -->
                        <prop key="kaptcha.obscurificator.impl">com.google.code.kaptcha.impl.WaterRipple</prop>
                        <!-- 验证码字体大小 -->
                        <prop key="kaptcha.textproducer.font.size">35</prop>
                        <!-- 验证码字数 -->
                        <prop key="kaptcha.textproducer.char.length">4</prop>
                        <!-- 验证码文字间距 -->
                        <prop key="kaptcha.textproducer.char.space">2</prop>
                        <!-- 验证码字体 -->
                        <prop key="kaptcha.textproducer.font.names">new Font("Arial", 1, fontSize), new Font("Courier", 1, fontSize)</prop>
                        <!-- 不加噪声 -->
                        <prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.NoNoise</prop>
                    </props>
                </constructor-arg>
            </bean>
        </property>
    </bean>
</beans>